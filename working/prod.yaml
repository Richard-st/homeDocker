version: "2.1"
services:


  #########################
  # File Browser          #
  #########################
  #filebrowser:
  #  image:  filebrowser/filebrowser
  #  container_name: filebrowser
  #  ports:
  #    - 90:80
  #  networks:
  #    - web
  #  environment:
  #    - PUID=1000 #optional
  #    - PGID=100 #optional
  #    - TZ=${TZ}
  #  volumes:
#      - /srv/dev-disk-by-label-Share/homeServer/:srv
  #    - ${FILE_ROOT}:/srv
#      - ${FILE_ROOT}config/filebrowser/database.db:/database.db
#      - ${FILE_ROOT}config/filebrowser/.filebrowser.json:/.filebrowser.json
  #  restart: unless-stopped

  #########################
  # Traefik Reverse Proxy #
  #########################
  reverse-proxy:
    image: traefik
    container_name: traefik
    environment:
      - PUID=0 
      - PGID=0
      - TZ=${TZ}
    command:
      - --api.insecure=true
      - --log.level=ERROR
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --serversTransport.insecureSkipVerify=true
      - --entryPoints.web.address=:80 
      - --entryPoints.websecure.address=:443
      - --providers.file.filename=/etc/traefik/config/dynamic.yml
      - --certificatesresolvers.myresolver.acme.email=admin@stanners.co.nz
      - --certificatesresolvers.myresolver.acme.storage=/home/acme.json
      #- --certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme.json
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - 8081:8080
      - 443:443
    networks:
      - web
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${FILE_ROOT}config/traefik:/etc/traefik
      #- ${FILE_ROOT}config/traefik/acme.json:/acme.json
      - /home/acme.json:/acme.json

    restart: unless-stopped

  ############################
  # Authelia Access Manager  #
  ############################
  authelia:
    container_name: authelia
    # image: authelia/authelia:latest
    image: authelia/authelia:4.21.0
    restart: always
    networks:
      - web
    volumes:
      -  ${FILE_ROOT}config/authelia:/config
    environment:
      - TZ=${TZ}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`authelia.stanners.co.nz`)'
      - 'traefik.http.routers.authelia.tls=true'
     # - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://authelia.stanners.co.nz/'
     # - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
     # - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups'


  ############################
  # Duck DNS                 #
  ############################

  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    networks:
      - web
    environment:
      - PUID=1000 #optional
      - PGID=100 #optional
      - TZ=${TZ}
      - LOG_FILE=false #optional
      - TOKEN=${DUCKDNS_TOKEN}
      - SUBDOMAINS=${DUCKDNS_SUBDOMAIN}
    restart: unless-stopped

  #########################
  # Heimdall App Manager  #
  #########################

  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
    volumes:
      - ${FILE_ROOT}/config/heimdall:/config
    ports:
      - 8181:80
      - 8443:443
    restart: unless-stopped



  ############################
  # Sonarr                   #
  ############################
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    networks:
      - web
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
      - UMASK_SET=022 #optional
    volumes:
      - ${FILE_ROOT}config/sonarr:/config
      - ${FILE_ROOT}media/TVShows:/tv
      - ${FILE_ROOT}/media/downloader:/downloads
    #labels:
    #  - traefik.enable=true
    #  - traefik.http.routers.sonarr.rule=Host(`sonarr.local`)
    ports:
      - 8989:8989
    restart: unless-stopped


  ############################
  # RADARR                   #
  ############################
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    networks:
      - web
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
      - UMASK_SET=022 #optional
    #labels:
    #  - traefik.enable=true
    #  - traefik.http.routers.radarr.rule=Host(`radarr.local`)
    volumes:
      - ${FILE_ROOT}config/radarr:/config
      - ${FILE_ROOT}media/Movies:/movies
      - ${FILE_ROOT}/media/downloader:/downloads
    ports:
      - 7878:7878
    restart: unless-stopped

  ############################
  # Jackett                  #
  ############################
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    networks:
      - web
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      - RUN_OPTS=run options here #optional
    #labels:
    #  - traefik.enable=true
    #  - traefik.http.routers.jackett.rule=Host(`jackett.local`)
    volumes:
      - ${FILE_ROOT}config/jackett:/config

    ports:
      - 9117:9117
    restart: unless-stopped

  ############################
  # nordvpn                   #
  ############################  
  vpn:
    container_name: nordvpn
    image: azinchen/nordvpn
    cap_add:
      - NET_ADMIN               # Required
      - SYS_MODULE              # Required for TECHNOLOGY=NordLynx
    devices:
      - /dev/net/tun            # Required
    environment:                # Review https://github.com/bubuntux/nordvpn#environment-variables
      - USER=${NORD_USER}       # Required
      - PASS=${NORD_PASS}      # Required
      - CONNECT=${NORD_LOC}
      - TECHNOLOGY=NordLynx


  ############################
  # deluge                   #
  ############################  
  deluge:
    container_name: deluge
    image: linuxserver/deluge
    network_mode: service:vpn
    depends_on:
      - vpn
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
      - UMASK_SET=022 #optional
      - DELUGE_LOGLEVEL=error #optional
    volumes:
      - ${FILE_ROOT}config/deluge:/config
      - ${FILE_ROOT}/media/downloader:/downloads
    #ports:
    #  - 8112:8112
    #labels:
    #  - traefik.enable=true
    #  - traefik.http.routers.deluge.rule=Host(`deluge.local`)
    #  - traefik.http.services.deluge.loadbalancer.server.port=8112 
    restart: unless-stopped

  ############################
  # deluge Proxy            #
  ############################ 
  web:
    container_name: deluge_proxy
    image: dperson/nginx        # https://github.com/dperson/nginx
    links:                                                                                   
      - vpn:deluge                                                                          
    depends_on:                                                                              
      - deluge                                                                              
    tmpfs:                                                                                   
      - /run                                                                                 
      - /tmp                                                                                 
      - /var/cache/nginx                                                                    
    ports:                                                                                   
      - 8113:80  
    command: -w "http://deluge:8112/;/" 

  ############################
  # plex                     #
  ############################ 
  plex:
    image: linuxserver/plex
    container_name: plex
    network_mode: host
    ports:
      - 32400:32400
    environment:
      - PUID=1000
      - PGID=100
      - VERSION=docker
      - UMASK_SET=022 #optional
      - PLEX_CLAIM= #optional
    #labels:
    #  - "traefik.enable=true"
    #  - "traefik.http.routers.plex.rule=Host(`plex.local`)"
    #  - "traefik.http.services.plex.loadbalancer.server.port=32400"
    volumes:
      - ${FILE_ROOT}config/plex:/config
      - ${FILE_ROOT}media/Movies:/movies
      - ${FILE_ROOT}media/TVShows:/tv
    restart: unless-stopped
    
  ############################
  # tautulli                #
  ############################
  tautulli:
    image: tautulli/tautulli
    container_name: tautulli
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
    ports:
      - "8182:8181"
    volumes:
      - ${FILE_ROOT}config/tautulli:/config

    restart: unless-stopped

  ############################
  # webgrab                  #
  ############################ 
  webgrabplus:
    image: linuxserver/webgrabplus
    container_name: webgrabplus
    environment:
      - PUID=1000
      - PGID=100
      - TZ=${TZ}
    volumes:
      - ${FILE_ROOT}config/webgrabplus:/config
      - ${FILE_ROOT}media/EPG:/data
    restart: unless-stopped
  ############################
  # unifi                    #
  ############################
  unifi-video:
    image: pducharme/unifi-video-controller

    container_name: unifi-video
    environment:
      - PUID=0
      - PGID=0
      - MEM_LIMIT=1024M #optional
      - CREATE_TMPFS=no
      #- DEBUG=1 
      - TZ=${TZ}
    cap_add:
      - SYS_ADMIN
      - DAC_READ_SEARCH   
    ports:      
      - 10001:10001 
      - 1935:1935 
      - 6666:6666 
      - 7080:7080 
      - 7442:7442 
      - 7443:7443 
      - 7444:7444 
      - 7445:7445 
      - 7446:7446 
      - 7447:7447 
    #labels:
    #  - traefik.enable=true
    #  - traefik.http.routers.unifi-video.rule=Host(`video.local`)
    #  - traefik.http.services.unifi-video.loadbalancer.server.port=7080
    volumes:
      - ${FILE_ROOT}config/unifi-video:/var/lib/unifi-video
      - ${FILE_ROOT}data/unifi-video:/var/lib/unifi-video/data/videos
    tmpfs:                                                                                   
      - /var/cache/unifi-video   

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080

networks:
  web:
    external: false


